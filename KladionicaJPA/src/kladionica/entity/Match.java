package kladionica.entity;
// Generated May 4, 2018 6:56:20 PM by Hibernate Tools 5.2.8.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Match generated by hbm2java
 */
@Entity
@Table(name = "match", catalog = "kladionica")
public class Match implements java.io.Serializable {

	private Integer idMatch;
	private League league;
	private Team teamByHomeTeamIdTeam;
	private Team teamByAwayTeamIdTeam;
	private Date time;
	private Integer homeScore;
	private Integer awayScore;
	private String city;
	private Double homeOdd;
	private Double egalOdd;
	private Double awayOdd;
	private Set<Ticket> tickets = new HashSet<Ticket>(0);

	public Match() {
	}

	public Match(League league, Team teamByHomeTeamIdTeam, Team teamByAwayTeamIdTeam) {
		this.league = league;
		this.teamByHomeTeamIdTeam = teamByHomeTeamIdTeam;
		this.teamByAwayTeamIdTeam = teamByAwayTeamIdTeam;
	}

	public Match(League league, Team teamByHomeTeamIdTeam, Team teamByAwayTeamIdTeam, Date time, Integer homeScore,
			Integer awayScore, String city, Double homeOdd, Double egalOdd, Double awayOdd, Set<Ticket> tickets) {
		this.league = league;
		this.teamByHomeTeamIdTeam = teamByHomeTeamIdTeam;
		this.teamByAwayTeamIdTeam = teamByAwayTeamIdTeam;
		this.time = time;
		this.homeScore = homeScore;
		this.awayScore = awayScore;
		this.city = city;
		this.homeOdd = homeOdd;
		this.egalOdd = egalOdd;
		this.awayOdd = awayOdd;
		this.tickets = tickets;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "idMatch", unique = true, nullable = false)
	public Integer getIdMatch() {
		return this.idMatch;
	}

	public void setIdMatch(Integer idMatch) {
		this.idMatch = idMatch;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "League_idLeague", nullable = false)
	public League getLeague() {
		return this.league;
	}

	public void setLeague(League league) {
		this.league = league;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "HomeTeam_idTeam", nullable = false)
	public Team getTeamByHomeTeamIdTeam() {
		return this.teamByHomeTeamIdTeam;
	}

	public void setTeamByHomeTeamIdTeam(Team teamByHomeTeamIdTeam) {
		this.teamByHomeTeamIdTeam = teamByHomeTeamIdTeam;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "AwayTeam_idTeam", nullable = false)
	public Team getTeamByAwayTeamIdTeam() {
		return this.teamByAwayTeamIdTeam;
	}

	public void setTeamByAwayTeamIdTeam(Team teamByAwayTeamIdTeam) {
		this.teamByAwayTeamIdTeam = teamByAwayTeamIdTeam;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "time", length = 19)
	public Date getTime() {
		return this.time;
	}

	public void setTime(Date time) {
		this.time = time;
	}

	@Column(name = "homeScore")
	public Integer getHomeScore() {
		return this.homeScore;
	}

	public void setHomeScore(Integer homeScore) {
		this.homeScore = homeScore;
	}

	@Column(name = "awayScore")
	public Integer getAwayScore() {
		return this.awayScore;
	}

	public void setAwayScore(Integer awayScore) {
		this.awayScore = awayScore;
	}

	@Column(name = "city", length = 45)
	public String getCity() {
		return this.city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	@Column(name = "homeOdd", precision = 22, scale = 0)
	public Double getHomeOdd() {
		return this.homeOdd;
	}

	public void setHomeOdd(Double homeOdd) {
		this.homeOdd = homeOdd;
	}

	@Column(name = "egalOdd", precision = 22, scale = 0)
	public Double getEgalOdd() {
		return this.egalOdd;
	}

	public void setEgalOdd(Double egalOdd) {
		this.egalOdd = egalOdd;
	}

	@Column(name = "awayOdd", precision = 22, scale = 0)
	public Double getAwayOdd() {
		return this.awayOdd;
	}

	public void setAwayOdd(Double awayOdd) {
		this.awayOdd = awayOdd;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "ticket_has_match", catalog = "kladionica", joinColumns = {
			@JoinColumn(name = "Match_idMatch", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "Ticket_idTicket", nullable = false, updatable = false) })
	public Set<Ticket> getTickets() {
		return this.tickets;
	}

	public void setTickets(Set<Ticket> tickets) {
		this.tickets = tickets;
	}

}
